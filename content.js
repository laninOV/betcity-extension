// content.js ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –∏ –≤ –∫–æ–Ω—Å–æ–ª—å, –∏ –≤ popup
(() => {
  console.log("üéæ Tennis Analysis content.js –∑–∞–≥—Ä—É–∂–µ–Ω");

  /* ----------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ----------------------- */
  const cfg = {
    a1: 1,          // –≤–µ—Å –ø–æ–±–µ–¥—ã
    a2: 0.5,        // –≤–µ—Å —Ä–∞–∑–Ω–∏—Ü—ã —Å–µ—Ç–æ–≤
    a3: 0.3,        // –≤–µ—Å —Ä–∞–∑–Ω–∏—Ü—ã –æ—á–∫–æ–≤
    a4: 0.2,        // –≤–µ—Å —Å—Ä–µ–¥–Ω–µ–π —Ñ–æ—Ä—ã
    tau: 0.03,      // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ç—É—Ö–∞–Ω–∏—è –ø–æ –¥–∞–≤–Ω–æ—Å—Ç–∏ –º–∞—Ç—á–∞
    fMax: 5,        // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ñ–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    k: 5,           // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    h2hK: 0.15      // –≤–µ—Å –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
  };
  const now = new Date();

  /* ----------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------------------- */

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∏–≥—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ¬´–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã¬ª
  function parseGame(row, header) {
    const dateCell = row.querySelector("td.date");
    const dateText = dateCell?.textContent.trim();
    if (!dateText) return null;

    const [d, m, y] = dateText.split(".").map(Number);
    const dt = new Date(2000 + y, m - 1, d);
    const diffDays = Math.floor((now - dt) / (24 * 3600 * 1000));

    const info = row.nextElementSibling;
    const playersText = info.querySelector("td.ev-mstat-ev")?.textContent.trim();
    const scoreText   = info.querySelector("td.score")?.textContent.trim();
    if (!playersText || !scoreText) return null;

    const match = scoreText.match(/^(\d+):(\d+)\s*\(([^)]+)\)/);
    if (!match) return null;

    const [, s1, s2, pts] = match;
    const sets1 = +s1, sets2 = +s2;
    const pairs  = pts.split(",").map(p => p.trim().split(":").map(Number));

    const isHome = playersText.indexOf(header) < playersText.indexOf(" - ");
    const playerSets = isHome ? sets1 : sets2;
    const oppSets    = isHome ? sets2 : sets1;

    const total1 = pairs.reduce((acc, [a]) => acc + a, 0);
    const total2 = pairs.reduce((acc, [, b]) => acc + b, 0);

    const playerPoints = isHome ? total1 : total2;
    const oppPoints    = isHome ? total2 : total1;
    const handicap     = playerPoints - oppPoints;
    const win          = playerSets > oppSets ? 1 : 0;

    const w = Math.exp(-cfg.tau * diffDays);                     // –≤–µ—Å –¥–∞–≤–Ω–æ—Å—Ç–∏
    const sr = (playerSets + oppSets) ? (playerSets - oppSets) / (playerSets + oppSets) : 0;    // —Ä–∞–∑–Ω–∏—Ü–∞ —Å–µ—Ç–æ–≤
    const pr = (playerPoints + oppPoints) 
                 ? Math.tanh((playerPoints - oppPoints) / (playerPoints + oppPoints)) : 0;       // –Ω–æ—Ä–º. —Ä–∞–∑–Ω–∏—Ü–∞ –æ—á–∫–æ–≤
    const avgH = (playerSets + oppSets) ? handicap / (playerSets + oppSets) : 0;                // —Å—Ä–µ–¥–Ω—è—è —Ñ–æ—Ä–∞ –Ω–∞ —Å–µ—Ç
    const hn = Math.max(-1, Math.min(1, avgH / cfg.fMax));                                      // –Ω–æ—Ä–º. —Ñ–æ—Ä–∞

    const qualityBonus = win
      ? (playerSets === 3 && oppSets === 0 ? 0.2
        : playerSets === 3 && oppSets === 1 ? 0.1
        : 0)
      : 0;

    const Mi = cfg.a1 * win + cfg.a2 * sr + cfg.a3 * pr + cfg.a4 * hn + qualityBonus;

    return {
      win,
      playerSets, oppSets,
      playerPoints, oppPoints,
      handicap,
      w, Mi,
      diffDays,
      dt
    };
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å–µ–∫—Ü–∏–∏ ¬´–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã¬ª –æ–¥–Ω–æ–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω
  function parseSection(table) {
    const titleCell = table.querySelector("tr:first-child td.title, tr:first-child td");
    const header    = (titleCell?.textContent.trim() || "")
                        .replace(/^–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã\s+/i, "")
                        .replace(/:$/, "")
                        .trim();

    const rows = Array.from(table.querySelectorAll("tr")).slice(2);
    const games = [];
    for (let i = 0; i + 1 < rows.length && games.length < 5; i += 2) {
      const g = parseGame(rows[i], header);
      if (g) games.push(g);
    }
    return { player: header, games };
  }

  // –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ (–≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ Mi) ‚Äî –≤—Å–µ –∏–≥—Ä—ã –∏–ª–∏ –ø–µ—Ä–≤—ã–µ limit
  function calcBaseS(games, limit = null) {
    const arr = limit ? games.slice(0, limit) : games;
    let num = 0, den = 0;
    arr.forEach(g => { num += g.w * g.Mi; den += g.w; });
    return den ? num / den : 0;
  }

  // –ë–∞–ª–∞–Ω—Å —Ñ–æ—Ä (—Å—Ä–µ–¥–Ω—è—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–∞ –ø–æ–±–µ–¥ ‚Äì —Å—Ä–µ–¥–Ω—è—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–π)
  function calcForaBalance(games) {
    const wins   = games.filter(g => g.win);
    const losses = games.filter(g => !g.win);
    const fW = wins.length   ? wins.reduce((s, g) => s +  g.handicap          , 0) / wins.length   : 0;
    const fL = losses.length ? losses.reduce((s, g) => s + Math.abs(g.handicap), 0) / losses.length : 0;
    return Math.tanh((fW - fL) / cfg.fMax);
  }

  // –î–∏—Å–ø–µ—Ä—Å–∏—è —Ñ–æ—Ä (–¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)
  function calcForaVariance(games) {
    if (!games.length) return 0;
    const mean = games.reduce((s, g) => s + g.handicap, 0) / games.length;
    const var_ = games.reduce((s, g) => s + (g.handicap - mean) ** 2, 0) / games.length;
    return Math.sqrt(var_);
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å–∏–ª–∞ –∏–≥—Ä–æ–∫–∞ —Å —É—á—ë—Ç–æ–º —Ñ–æ—Ä
  function strengthAdj(games) {
    const S = calcBaseS(games);
    const F = calcForaBalance(games);
    return S + 0.25 * F;
  }

  // –ß–∏—Å—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —Å–∏–ª—ã
  function getStrengthLabel(x) {
    if (x >=  1.5) return "–æ—Ç–ª–∏—á–Ω–∞—è";
    if (x >=  1.0) return "—Ö–æ—Ä–æ—à–∞—è";
    if (x >=  0.5) return "—Å—Ä–µ–¥–Ω—è—è";
    if (x >=  0.0) return "—Å–ª–∞–±–∞—è";
    return "–æ—á–µ–Ω—å —Å–ª–∞–±–∞—è";
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã ¬´–û—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏¬ª
  function parseH2H(playerA, playerB) {
    const h2hTable = [...document.querySelectorAll("table")]
      .find(t => t.querySelector("tr:first-child td.title")?.textContent.includes("–û—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏"));
    if (!h2hTable) return { wA: 0, wB: 0, total: 0, wAweighted: 0, wBweighted: 0, sumW: 0 };

    const rows = [...h2hTable.querySelectorAll("tr")].slice(2);
    let wAweighted = 0, wBweighted = 0, sumW = 0, wA = 0, wB = 0;

    rows.forEach(row => {
      const score      = row.querySelector("td.score")?.textContent.trim();
      const playersTxt = row.querySelector("td.descr")?.textContent.trim();
      const dateTxt    = row.querySelector("td.date")?.textContent.trim();
      if (!score || !playersTxt || !dateTxt) return;

      const match = score.match(/^(\d+):(\d+)/);
      if (!match) return;
      const [s1, s2] = match.slice(1, 3).map(Number);
      const [d, m, y] = dateTxt.split(".").map(Number);
      const dt = new Date(2000 + y, m - 1, d);
      const diffDays = Math.floor((now - dt) / (24 * 3600 * 1000));
      const w = Math.exp(-cfg.tau * diffDays);

      const isAhome = playersTxt.indexOf(playerA) < playersTxt.indexOf(" - ");

      if ((isAhome && s1 > s2) || (!isAhome && s2 > s1)) {
        wAweighted += w; wA++;
      } else {
        wBweighted += w; wB++;
      }
      sumW += w;
    });
    return { wA, wB, total: wA + wB, wAweighted, wBweighted, sumW };
  }

  // –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ (—ç–º–æ–¥–∑–∏)
  function getConfidenceLevel(pA, pB, varA, varB, h2hTotal) {
    const maxProb = Math.max(pA, pB);
    const minVar  = Math.min(varA, varB);

    if (maxProb > 0.75 && minVar < 8  && h2hTotal >= 3) return "üü¢";
    if (maxProb > 0.65 && minVar < 12)                   return "üü°";
    return "üî¥";
  }

  // –°–æ–≤–µ—Ç –ø–æ —Å—Ç–∞–≤–∫–µ
  function getAdvice(pA, pB, varA, varB, normA, normB, h2h) {
    const maxVar      = Math.max(varA, varB);
    const probDiff    = Math.abs(pA - pB);
    const strengthDiff= Math.abs(normA - normB);

    if (maxVar > 15)              return "–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ—Ç–∞–ª—ã –∏–ª–∏ —Ç–æ—á–Ω—ã–π —Å—á—ë—Ç.";
    if (probDiff < 0.15)          return "–ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã ‚Äî –ª—É—á—à–µ –∏–≥—Ä–∞—Ç—å —Ç–æ—Ç–∞–ª, –∞ –Ω–µ –∏—Å—Ö–æ–¥.";
    if (strengthDiff > 20 && h2h.total >= 5)
                                 return "–Ø–≤–Ω—ã–π —Ñ–∞–≤–æ—Ä–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω H2H ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥ –æ–ø—Ä–∞–≤–¥–∞–Ω–∞.";
    if (h2h.total < 3)            return "–ú–∞–ª–æ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á ‚Äî —Å–Ω–∏–∑—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏.";
    return "–£–º–µ—Ä–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.";
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
  function logToConsole(sectionA, sectionB, S1, S2, h2h, finalData) {
    console.group("üéæ –¢–ï–ù–ù–ò–°–ù–´–ô –ê–ù–ê–õ–ò–ó");
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    [sectionA, sectionB].forEach((section, index) => {
      const S = index === 0 ? S1 : S2;
      const Sraw = calcBaseS(section.games);
      const S2games = calcBaseS(section.games, 2);
      const varF = calcForaVariance(section.games);
      const foraBalance = calcForaBalance(section.games);
      
      console.group(`${section.player}:`);
      console.log(`S –∑–∞ 2 –∏–≥—Ä—ã: ${S2games.toFixed(3)} (${getStrengthLabel(S2games)})`);
      console.log(`S –∑–∞ 5 –∏–≥—Ä: ${Sraw.toFixed(3)} (${getStrengthLabel(Sraw)})`);
      console.log(`–ë–∞–ª–∞–Ω—Å —Ñ–æ—Ä: ${foraBalance.toFixed(3)} (${getStrengthLabel(foraBalance)})`);
      console.log(`S –∏—Ç–æ–≥–æ–≤–∞—è: ${S.toFixed(3)} (${getStrengthLabel(S)})`);
      console.log(`–î–∏—Å–ø–µ—Ä—Å–∏—è —Ñ–æ—Ä—ã: ${varF.toFixed(2)}`);
      
      section.games.forEach((g, i) => {
        const res = g.win ? "–í—ã–∏–≥—Ä–∞–ª" : "–ü—Ä–æ–∏–≥—Ä–∞–ª";
        const sign = g.handicap >= 0 ? "+" : "";
        console.log(
          `–ò–≥—Ä–∞ ${i + 1}: ${res} ${g.playerSets}-${g.oppSets}, –æ—á–∫–∏ ${g.playerPoints}-${g.oppPoints}, —Ñ–æ—Ä–∞ ${sign}${g.handicap}`
        );
      });
      console.groupEnd();
    });

    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.group("üìä –ò–¢–û–ì–û–í–´–ô –ü–†–û–ì–ù–û–ó");
    console.table(finalData.players.map(p => ({
      "–ò–≥—Ä–æ–∫": p.name,
      "S (0-100)": p.strength,
      "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)": p.probability,
      "H2H –ø–æ–±–µ–¥": p.h2h,
      "–î–∏—Å–ø–µ—Ä—Å–∏—è —Ñ–æ—Ä": p.variance
    })));
    
    console.log(`H2H: ${sectionA.player} ${h2h.wA}-${h2h.wB} ${sectionB.player} (–∏–∑ ${h2h.total})`);
    console.log(`${finalData.confidence} –§–∞–≤–æ—Ä–∏—Ç: ${finalData.favorite}`);
    console.log(`üí° –°–æ–≤–µ—Ç: ${finalData.advice}`);
    
    if (finalData.additionalInfo) {
      console.log("üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", finalData.additionalInfo);
    }
    
    console.groupEnd();
    console.groupEnd();
  }

  /* ----------------------- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê ----------------------- */

  function performAnalysis() {
    console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...");
    
    // –ò—â–µ–º –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã ¬´–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã¬ª
    const tables = document.querySelectorAll("table.ev-mstat-tbl");
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);
    
    if (tables.length < 2) {
      throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã ¬´–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã¬ª");
    }

    const sectionA = parseSection(tables[0]);
    const sectionB = parseSection(tables[1]);
    
    console.log(`–ò–≥—Ä–æ–∫ A: ${sectionA.player}, –∏–≥—Ä: ${sectionA.games.length}`);
    console.log(`–ò–≥—Ä–æ–∫ B: ${sectionB.player}, –∏–≥—Ä: ${sectionB.games.length}`);

    // –ë–∞–∑–æ–≤—ã–µ —Å–∏–ª—ã
    const S1raw   = calcBaseS(sectionA.games);
    const S2raw   = calcBaseS(sectionB.games);
    const Sadj1   = strengthAdj(sectionA.games);
    const Sadj2   = strengthAdj(sectionB.games);

    // –õ–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
    const h2h = parseH2H(sectionA.player, sectionB.player);
    const hH  = h2h.sumW > 0 ? cfg.h2hK * (2 * (h2h.wAweighted / h2h.sumW) - 1) : 0;

    // –ò—Ç–æ–≥–æ–≤—ã–µ —Å–∏–ª—ã —Å —É—á—ë—Ç–æ–º H2H (70% —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ + 30% H2H-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è)
    const SfA   = 0.7 * Sadj1 + hH;
    const SfB   = 0.7 * Sadj2 - hH;

    // –ù–æ—Ä–º–∏—Ä—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-100
    const normA = 50 + 50 * SfA;
    const normB = 50 + 50 * SfB;

    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    let pA = 1 / (1 + Math.exp(-cfg.k * (SfA - SfB)));
    let pB = 1 - pA;

    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä
    const varA = calcForaVariance(sectionA.games);
    const varB = calcForaVariance(sectionB.games);
    if (varA > 10 || varB > 10) {
      pA = 0.35 + 0.3 * (pA - 0.5);
      pB = 1 - pA;
    }

    // –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–æ–≤–µ—Ç
    const confidence = getConfidenceLevel(pA, pB, varA, varB, h2h.total);
    const advice     = getAdvice(pA, pB, varA, varB, normA, normB, h2h);

    // –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ç—á–∞–º ‚Äî —Å—Ç—Ä–æ–∫–∏ –¥–ª—è popup
    function gameStr(g, idx) {
      const res  = g.win ? "W" : "L";
      const sign = g.handicap >= 0 ? "+" : "";
      return `#${idx + 1}: ${res} ${g.playerSets}-${g.oppSets}, pts ${g.playerPoints}-${g.oppPoints}, fora ${sign}${g.handicap}`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è popup
    const finalData = {
      confidence,
      players: [
        {
          name: sectionA.player,
          strength: normA.toFixed(1),
          probability: (pA * 100).toFixed(1),
          h2h: h2h.wA.toString(),
          variance: varA.toFixed(1)
        },
        {
          name: sectionB.player,
          strength: normB.toFixed(1),
          probability: (pB * 100).toFixed(1),
          h2h: h2h.wB.toString(),
          variance: varB.toFixed(1)
        }
      ],
      favorite: pA > pB
        ? `${sectionA.player} [${normA.toFixed(1)}]`
        : `${sectionB.player} [${normB.toFixed(1)}]`,
      advice,
      h2hInfo: `${sectionA.player} ${h2h.wA}-${h2h.wB} ${sectionB.player} (–∏–∑ ${h2h.total} –≤—Å—Ç—Ä–µ—á)`,
      detailedStats: [
        {
          player: sectionA.player,
          games: sectionA.games.map(gameStr)
        },
        {
          player: sectionB.player,
          games: sectionB.games.map(gameStr)
        }
      ],
      additionalInfo: {
        "S –±–∞–∑–æ–≤–∞—è A": S1raw.toFixed(3),
        "S –±–∞–∑–æ–≤–∞—è B": S2raw.toFixed(3),
        "H2H –∫–æ—Ä—Ä–µ–∫—Ü–∏—è": hH.toFixed(3),
        "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å A": varA > 10 ? "–í—ã—Å–æ–∫–∞—è" : "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è",
        "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å B": varB > 10 ? "–í—ã—Å–æ–∫–∞—è" : "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è",
        "–í—Å–µ–≥–æ H2H": h2h.total.toString()
      }
    };

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logToConsole(sectionA, sectionB, Sadj1, Sadj2, h2h, finalData);

    return finalData;
  }

  /* ----------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ----------------------- */

  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", request);
    
    if (request.action === "analyze") {
      try {
        const data = performAnalysis();
        console.log("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        sendResponse({ success: true, data });
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:", err);
        sendResponse({ success: false, error: err.message });
      }
      return true; // –í–∞–∂–Ω–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    }
  });

  console.log("üéæ Tennis Analysis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
})();
