// content.js ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–∏–ª—ã –∏ —É–º–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏

(() => {
  console.log("content.js –∑–∞–ø—É—â–µ–Ω");

  const cfg = {
    a1: 1,
    a2: 0.5,
    a3: 0.3,
    a4: 0.2,
    tau: 0.03,
    fMax: 5,
    k: 5,
    h2hK: 0.15
  };
  const now = new Date();

  function parseGame(row, header) {
    const dateCell = row.querySelector("td.date");
    const dateText = dateCell?.textContent.trim();
    if (!dateText) return null;
    const [d, m, y] = dateText.split(".").map(Number);
    const dt = new Date(2000 + y, m - 1, d);
    const diffDays = Math.floor((now - dt) / (1000 * 60 * 60 * 24));

    const info = row.nextElementSibling;
    const playersText = info.querySelector("td.ev-mstat-ev")?.textContent.trim();
    const scoreText = info.querySelector("td.score")?.textContent.trim();
    if (!playersText || !scoreText) return null;

    const match = scoreText.match(/^(\d+):(\d+)\s*\(([^)]+)\)/);
    if (!match) return null;
    const [, s1, s2, pts] = match;
    const sets1 = +s1, sets2 = +s2;
    const pairs = pts.split(",").map(p => p.trim().split(":").map(Number));

    const isHome = playersText.indexOf(header) < playersText.indexOf(" - ");
    const playerSets = isHome ? sets1 : sets2;
    const oppSets = isHome ? sets2 : sets1;

    const total1 = pairs.reduce((sum, [a]) => sum + a, 0);
    const total2 = pairs.reduce((sum, [, b]) => sum + b, 0);

    const playerPoints = isHome ? total1 : total2;
    const oppPoints = isHome ? total2 : total1;
    const handicap = playerPoints - oppPoints;
    const win = playerSets > oppSets ? 1 : 0;

    const w = Math.exp(-cfg.tau * diffDays);

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å–∏–ª—ã —Å —É—á—ë—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥—ã
    const sr = (playerSets + oppSets) ? (playerSets - oppSets) / (playerSets + oppSets) : 0;
    const pr = (playerPoints + oppPoints)
      ? Math.tanh((playerPoints - oppPoints) / (playerPoints + oppPoints))
      : 0;
    const avgH = (playerSets + oppSets) ? handicap / (playerSets + oppSets) : 0;
    const hn = Math.max(-1, Math.min(1, avgH / cfg.fMax));
    
    // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥—ã (3:0, 3:1 –ª—É—á—à–µ —á–µ–º 3:2)
    const qualityBonus = win ? (playerSets === 3 && oppSets === 0 ? 0.2 : 
                               playerSets === 3 && oppSets === 1 ? 0.1 : 0) : 0;
    
    const Mi = cfg.a1 * win + cfg.a2 * sr + cfg.a3 * pr + cfg.a4 * hn + qualityBonus;

    return { win, playerSets, oppSets, playerPoints, oppPoints, handicap, w, Mi, diffDays, dt };
  }

  function parseSection(table) {
    const titleCell = table.querySelector("tr:first-child td.title, tr:first-child td");
    const titleText = titleCell?.textContent.trim() || "";
    const header = titleText.replace(/^–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã\s+/, "").replace(/:$/, "").trim();

    const rows = Array.from(table.querySelectorAll("tr")).slice(2);
    const games = [];
    for (let i = 0; i + 1 < rows.length && games.length < 5; i += 2) {
      const g = parseGame(rows[i], header);
      if (g) games.push(g);
    }
    return { player: header, games };
  }

  function calcBaseS(games, limit = null) {
    const gamesSubset = limit ? games.slice(0, limit) : games;
    let num = 0, den = 0;
    gamesSubset.forEach(g => { num += g.w * g.Mi; den += g.w; });
    return den ? num / den : 0;
  }

  function calcForaBalance(games) {
    const wins = games.filter(g => g.win);
    const losses = games.filter(g => !g.win);
    const fW = wins.length ? wins.reduce((s, g) => s + g.handicap, 0) / wins.length : 0;
    const fL = losses.length ? losses.reduce((s, g) => s + Math.abs(g.handicap), 0) / losses.length : 0;
    return Math.tanh((fW - fL) / cfg.fMax);
  }

  function calcForaVariance(games) {
    if (games.length === 0) return 0;
    const mean = games.reduce((s, g) => s + g.handicap, 0) / games.length;
    const variance = games.reduce((s, g) => s + (g.handicap - mean) ** 2, 0) / games.length;
    return Math.sqrt(variance);
  }

  function strengthAdj(games) {
    const S = calcBaseS(games);
    const F = calcForaBalance(games);
    return S + 0.25 * F;
  }

  function getStrengthLabel(s) {
    if (s >= 1.5) return "–æ—Ç–ª–∏—á–Ω–∞—è";
    if (s >= 1.0) return "—Ö–æ—Ä–æ—à–∞—è";
    if (s >= 0.5) return "—Å—Ä–µ–¥–Ω—è—è";
    if (s >= 0.0) return "—Å–ª–∞–±–∞—è";
    return "–æ—á–µ–Ω—å —Å–ª–∞–±–∞—è";
  }

  function parseH2H(playerA, playerB) {
    const h2hTable = [...document.querySelectorAll("table")]
      .find(t => t.querySelector("tr:first-child td.title")?.textContent.includes("–û—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏"));
    if (!h2hTable) return { wA: 0, wB: 0, total: 0, wAweighted: 0, wBweighted: 0, sumW: 0 };

    const rows = [...h2hTable.querySelectorAll("tr")].slice(2);
    let wAweighted = 0, wBweighted = 0, sumW = 0, wA = 0, wB = 0;
    rows.forEach(row => {
      const score = row.querySelector("td.score")?.textContent.trim();
      const playersText = row.querySelector("td.descr")?.textContent.trim();
      const dateText = row.querySelector("td.date")?.textContent.trim();
      if (!score || !playersText || !dateText) return;
      const [s1, s2] = score.match(/^(\d+):(\d+)/).slice(1, 3).map(Number);
      const [d, m, y] = dateText.split(".").map(Number);
      const dt = new Date(2000 + y, m - 1, d);
      const diffDays = Math.floor((now - dt) / (1000 * 60 * 60 * 24));
      const weight = Math.exp(-cfg.tau * diffDays);
      const isAhome = playersText.indexOf(playerA) < playersText.indexOf(" - ");

      if ((isAhome && s1 > s2) || (!isAhome && s2 > s1)) {
        wAweighted += weight;
        wA++;
      }
      else {
        wBweighted += weight;
        wB++;
      }
      sumW += weight;
    });
    return { wA, wB, total: wA + wB, wAweighted, wBweighted, sumW };
  }

  function report(section) {
    const Sraw = calcBaseS(section.games);
    const S2games = calcBaseS(section.games, 2);
    const Sadj = strengthAdj(section.games);
    const varF = calcForaVariance(section.games);
    const foraBalance = calcForaBalance(section.games);
    
    console.group(`${section.player}:`);
    console.log(`S –∑–∞ 2 –∏–≥—Ä—ã: ${S2games.toFixed(3)} (${getStrengthLabel(S2games)})`);
    console.log(`S –∑–∞ 5 –∏–≥—Ä: ${Sraw.toFixed(3)} (${getStrengthLabel(Sraw)})`);
    console.log(`–ë–∞–ª–∞–Ω—Å —Ñ–æ—Ä: ${foraBalance.toFixed(3)} (${getStrengthLabel(foraBalance)})`);
    console.log(`S –∏—Ç–æ–≥–æ–≤–∞—è: ${Sadj.toFixed(3)} (${getStrengthLabel(Sadj)})`);
    console.log(`–î–∏—Å–ø–µ—Ä—Å–∏—è —Ñ–æ—Ä—ã: ${varF.toFixed(2)}`);
    
    section.games.forEach((g, i) => {
      const res = g.win ? "–í—ã–∏–≥—Ä–∞–ª" : "–ü—Ä–æ–∏–≥—Ä–∞–ª";
      const sign = g.handicap >= 0 ? "+" : "";
      console.log(
        `–ò–≥—Ä–∞ ${i + 1}: ${res} ${g.playerSets}-${g.oppSets}, –æ—á–∫–∏ ${g.playerPoints}-${g.oppPoints}, ${res.toLowerCase()} —Å —Ñ–æ—Ä–æ–π ${sign}${g.handicap}`
      );
    });
    console.groupEnd();
    return Sadj;
  }

  function getConfidenceLevel(pA, pB, varA, varB, h2hTotal) {
    const maxProb = Math.max(pA, pB);
    const minVar = Math.min(varA, varB);
    
    // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å >75%, –Ω–∏–∑–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ H2H
    if (maxProb > 0.75 && minVar < 8 && h2hTotal >= 3) return "üü¢";
    // –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å >65% –∏–ª–∏ —Ö–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    if (maxProb > 0.65 && minVar < 12) return "üü°";
    // –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    return "üî¥";
  }

  function getAdvice(pA, pB, varA, varB, normA, normB, h2h) {
    const maxVar = Math.max(varA, varB);
    const probDiff = Math.abs(pA - pB);
    const strengthDiff = Math.abs(normA - normB);
    
    if (maxVar > 15) {
      return "–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ —Ç–æ—Ç–∞–ª –∏–ª–∏ —Ç–æ—á–Ω—ã–π —Å—á—ë—Ç –≤–º–µ—Å—Ç–æ –∏—Å—Ö–æ–¥–∞";
    }
    if (probDiff < 0.15) {
      return "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã ‚Äî –∏–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∞, –ª—É—á—à–µ —Ç–æ—Ç–∞–ª –æ—á–∫–æ–≤";
    }
    if (strengthDiff > 20 && h2h.total >= 5) {
      return "–Ø–≤–Ω—ã–π —Ñ–∞–≤–æ—Ä–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –∏—Å—Ö–æ–¥";
    }
    if (h2h.total < 3) {
      return "–ú–∞–ª–æ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –º–µ–Ω–µ–µ –Ω–∞–¥—ë–∂–µ–Ω, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å—Ç–∞–≤–∫–∞—Ö";
    }
    return "–£–º–µ—Ä–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é";
  }

  // --- –û—Å–Ω–æ–≤–Ω–æ–π ---
  const tables = document.querySelectorAll("table.ev-mstat-tbl");
  if (tables.length < 2) {
    console.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã ¬´–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã¬ª");
    return;
  }

  const sectionA = parseSection(tables[0]);
  const sectionB = parseSection(tables[1]);
  const S1 = report(sectionA);
  const S2 = report(sectionB);

  // –ü–∞—Ä—Å–∏–Ω–≥ H2H
  const h2h = parseH2H(sectionA.player, sectionB.player);
  const hH = h2h.sumW > 0 ? cfg.h2hK * (2 * (h2h.wAweighted / h2h.sumW) - 1) : 0;

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å–∏–ª–∞
  const SfinalA = 0.7 * S1 + hH;
  const SfinalB = 0.7 * S2 - hH;

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  const normA = 50 + 50 * SfinalA;
  const normB = 50 + 50 * SfinalB;

  // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
  let pA0 = 1 / (1 + Math.exp(-cfg.k * (SfinalA - SfinalB)));
  let pB0 = 1 - pA0;

  // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
  const varA = calcForaVariance(sectionA.games);
  const varB = calcForaVariance(sectionB.games);
  let pA = pA0;
  let pB = pB0;
  if (varA > 10 || varB > 10) {
    pA = 0.35 + 0.3 * (pA0 - 0.5);
    pB = 1 - pA;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  const confidence = getConfidenceLevel(pA, pB, varA, varB, h2h.total);
  const advice = getAdvice(pA, pB, varA, varB, normA, normB, h2h);

  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–∞
  console.group(`\n${confidence} –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:`);
  console.table([
    { "–ò–≥—Ä–æ–∫": sectionA.player, "S (0-100)": normA.toFixed(1), "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)": (pA * 100).toFixed(1), "–ë–∞–∑–æ–≤–∞—è S": S1.toFixed(3), "–î–∏—Å–ø–µ—Ä—Å–∏—è —Ñ–æ—Ä": varA.toFixed(2), "H2H": h2h.wA },
    { "–ò–≥—Ä–æ–∫": sectionB.player, "S (0-100)": normB.toFixed(1), "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)": (pB * 100).toFixed(1), "–ë–∞–∑–æ–≤–∞—è S": S2.toFixed(3), "–î–∏—Å–ø–µ—Ä—Å–∏—è —Ñ–æ—Ä": varB.toFixed(2), "H2H": h2h.wB }
  ]);
  
  console.log(`H2H: ${sectionA.player} ${h2h.wA}-${h2h.wB} ${sectionB.player} (–∏–∑ ${h2h.total})`);
  
  if (varA > 10 || varB > 10) {
    console.log("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è —Ñ–æ—Ä —É –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤");
  }
  
  console.log(`üéØ –§–∞–≤–æ—Ä–∏—Ç: ${(pA > pB ? sectionA.player : sectionB.player)} [${Math.max(normA, normB).toFixed(1)}]`);
  console.log(`üí° –°–æ–≤–µ—Ç: ${advice}`);
  console.groupEnd();
})();
