(() => {
  const cfg = { a1: 1, a2: 0.5, a3: 0.3, a4: 0.2, tau: 0.03, fMax: 5, k: 5, h2hK: 0.15 };
  const now = new Date();

  function parseGame(row, header) {
    const dateText = row.querySelector("td.date")?.textContent.trim();
    if (!dateText) return null;
    const [d, m, y] = dateText.split(".").map(Number);
    const dt = new Date(2000 + y, m - 1, d);
    const diffDays = Math.floor((now - dt) / 86400000);

    const info = row.nextElementSibling;
    const playersText = info.querySelector("td.ev-mstat-ev")?.textContent.trim();
    const scoreText = info.querySelector("td.score")?.textContent.trim();
    if (!playersText || !scoreText) return null;
    const match = scoreText.match(/^(\d+):(\d+)\s*\(([^)]+)\)/);
    if (!match) return null;
    const [, s1, s2, pts] = match;
    const sets1 = +s1, sets2 = +s2;
    const pairs = pts.split(",").map(p => p.trim().split(":").map(Number));
    const isHome = playersText.indexOf(header) < playersText.indexOf(" - ");
    const playerSets = isHome ? sets1 : sets2;
    const oppSets = isHome ? sets2 : sets1;
    const total1 = pairs.reduce((a, [x]) => a + x, 0);
    const total2 = pairs.reduce((a, [, y]) => a + y, 0);
    const playerPoints = isHome ? total1 : total2;
    const oppPoints = isHome ? total2 : total1;
    const handicap = playerPoints - oppPoints;
    const win = playerSets > oppSets ? 1 : 0;
    const isDryWin = win === 1 && oppSets === 0;
    const isDryLoss = win === 0 && playerSets === 0;
    const w = Math.exp(-cfg.tau * diffDays);
    const sr = (playerSets + oppSets) ? (playerSets - oppSets) / (playerSets + oppSets) : 0;
    const pr = (playerPoints + oppPoints) ? Math.tanh((playerPoints - oppPoints) / (playerPoints + oppPoints)) : 0;
    const avgH = (playerSets + oppSets) ? handicap / (playerSets + oppSets) : 0;
    const hn = Math.max(-1, Math.min(1, avgH / cfg.fMax));
    const qualityBonus = win
      ? (playerSets === 3 && oppSets === 0 ? 0.2 : playerSets === 3 && oppSets === 1 ? 0.1 : 0)
      : 0;
    const Mi = cfg.a1 * win + cfg.a2 * sr + cfg.a3 * pr + cfg.a4 * hn + qualityBonus;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π –∏–≥—Ä—ã
    console.group(`–ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–∞: ${dt.toLocaleDateString('ru-RU')}`);
    console.log('playersText:', playersText);
    console.log('playerSets‚ÄìoppSets:', `${playerSets}:${oppSets}`);
    console.log('pts –ø–æ —Å–µ—Ç–∞–º:', pairs.map(p => p.join(':')).join(', '));
    console.log('handicap:', handicap, '–¥–Ω–µ–π –Ω–∞–∑–∞–¥:', diffDays);
    console.log('w (–≤–µ—Å):', w.toFixed(3));
    console.log('sr (—Å–∞—Ç. —Ä–∞–∑–Ω–∏—Ü):', sr.toFixed(3));
    console.log('pr (—Ä–∞–∑–Ω. –æ—á–∫–æ–≤):', pr.toFixed(3));
    console.log('hn (–Ω–æ—Ä–º. –≥–∞–Ω–¥–∏–∫–∞–ø):', hn.toFixed(3));
    console.log('qualityBonus:', qualityBonus);
    console.log('Mi (–∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞):', Mi.toFixed(3));
    console.groupEnd();

    return { win, playerSets, oppSets, pts: pairs, handicap, w, Mi, diffDays, isDryWin, isDryLoss, date: dt };
  }

  function parseSection(table) {
    const title = table.querySelector("tr:first-child td")?.textContent || "";
    const header = title.replace(/^–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã\s*/i, "").replace(/:$/, "").trim();
    const rows = Array.from(table.querySelectorAll("tr")).slice(2);
    const games = [];
    for (let i = 0; i + 1 < rows.length && games.length < 10; i += 2) {
      const g = parseGame(rows[i], header);
      if (g) games.push(g);
    }
    console.log(`\nüîç –†–∞–∑–¥–µ–ª: ${header} ‚Äî –≤—Å–µ–≥–æ –º–∞—Ç—á–µ–π: ${games.length}`);
    console.log('–°—ã—Ä—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–≥—Ä:', games);
    return { player: header, games };
  }

  // ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Ä¶

  function calcSetWins(games) {
    const out = { set1: [0, 0], set2: [0, 0], set3: [0, 0], set4: [0, 0], set5: [0, 0] };
    games.forEach(g => {
      g.pts.forEach((pair, idx) => {
        if (idx >= 5) return;
        const [a, b] = pair;
        if (a > b) out[`set${idx+1}`][0]++; else out[`set${idx+1}`][1]++;
      });
    });
    Object.keys(out).forEach(k => { out[k] = out[k].map(cnt => `${cnt}/${games.length}`); });
    return out;
  }

  function logStatistics(playerData) {
    console.group(`üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî ${playerData.player}`);
    console.log(`–ú–∞—Ç—á–µ–π: ${playerData.games.length}`);
    console.log(`–ü–æ–±–µ–¥: ${playerData.games.filter(g => g.win).length}`);
    console.log(`–ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${playerData.games.filter(g => !g.win).length}`);

    const setWins = calcSetWins(playerData.games);
    console.group("üéØ –ü–æ–±–µ–¥—ã –≤ —Å–µ—Ç–∞—Ö (–ø–æ—Å—Ä–µ–¥–∏–Ω–µ —Ä–∞—Å—á—ë—Ç–æ–≤):");
    Object.entries(setWins).forEach(([setNum, [p, o]]) => {
      console.log(`${setNum}: –ò–≥—Ä–æ–∫ ${p}, –°–æ–ø–µ—Ä–Ω–∏–∫ ${o}`);
    });
    console.groupEnd();

    const dry = calcDryGames(playerData.games);
    console.log(`–°—É—Ö–∏–µ –ø–æ–±–µ–¥—ã: ${dry.wins}, —Å—É—Ö–∏–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è: ${dry.losses}`);

    const baseS = calcBaseS(playerData.games);
    const fb = calcForaBalance(playerData.games);
    console.log(`calcBaseS: ${baseS.toFixed(3)}`);
    console.log(`calcForaBalance: ${fb.toFixed(3)}`);

    const variance = calcForaVariance(playerData.games);
    const stability = calcStability(variance);
    console.log(`calcForaVariance: ${variance.toFixed(3)}`);
    console.log(`calcStability: ${stability}%`);
    console.groupEnd();
  }

  function performAnalysis() {
    console.clear();
    console.log("=== –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê ===");
    const tables = document.querySelectorAll("table.ev-mstat-tbl");
    if (tables.length < 2) throw Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–±–ª–∏—Ü");
    const A = parseSection(tables[0]);
    const B = parseSection(tables[1]);
    logStatistics(A);
    logStatistics(B);

    // ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ performAnalysis —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º H2H –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ ‚Ä¶
  }

  chrome.runtime.onMessage.addListener((req, sender, send) => {
    if (req.action === "analyze") {
      try { send({ success: true, data: performAnalysis() }); }
      catch (e) { send({ success: false, error: e.message }); }
    }
    return true;
  });
})();
